import pandas as pd
import streamlit as st

st.set_page_config(page_title="AI Powered Crop Recommendation System and Market Advisory", page_icon="ЁЯМ▒")

# Load dataset
market_data = pd.read_csv("data/market_prices.csv")

# ЁЯМР Language selector
lang = st.selectbox("ЁЯМР Select Language / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ", ["English", "рд╣рд┐рдиреНрджреА"])

# ЁЯМР Translation dictionary
translations = {
    "English": {
        "title": "ЁЯМ▒ AGRIMIND AI-POWERED CROP & MARKET ADVISORY By GreenMind",
        "desc": "Enter your soil and weather values to get the best crop recommendation.",
        "inputs": {
            "N": "Nitrogen (N)",
            "P": "Phosphorus (P)",
            "K": "Potassium (K)",
            "pH": "Soil pH",
            "rainfall": "Rainfall (mm)",
            "temperature": "Temperature (┬░C)",
            "humidity": "Humidity (%)"
        },
        "button": "ЁЯФН Recommend Crop",
        "success": "тЬЕ Recommended Crop",
        "error": "тЪая╕П Soil type not found in dataset. Please type correctly.",
        "market": "ЁЯТ░ Market Price"
    },
    "рд╣рд┐рдиреНрджреА": {
        "title": "ЁЯМ▒ рдПрдЧреНрд░реАрдорд╛рдЗрдВрдб рдПрдЖрдИ-рдЖрдзрд╛рд░рд┐рдд рдлрд╕рд▓ рдФрд░ рдмрд╛рдЬрд╝рд╛рд░ рд╕рд▓рд╛рд╣ - рдЧреНрд░реАрдирдорд╛рдЗрдВрдб рджреНрд╡рд╛рд░рд╛",
        "desc": "рдЕрдкрдиреА рдорд┐рдЯреНрдЯреА рдФрд░ рдореМрд╕рдо рдХрд╛ рдорд╛рди рджрд░реНрдЬ рдХрд░реЗрдВ рдФрд░ рд╕рд░реНрд╡рд╢реНрд░реЗрд╖реНрда рдлрд╕рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред",
        "inputs": {
            "N": "рдирд╛рдЗрдЯреНрд░реЛрдЬрди (N)",
            "P": "рдлрд╛рд╕реНрдлреЛрд░рд╕ (P)",
            "K": "рдкреЛрдЯреИрд╢рд┐рдпрдо (K)",
            "pH": "рдорд┐рдЯреНрдЯреА рдХрд╛ pH",
            "rainfall": "рд╡рд░реНрд╖рд╛ (рдорд┐рдореА)",
            "temperature": "рддрд╛рдкрдорд╛рди (┬░C)",
            "humidity": "рдЖрд░реНрджреНрд░рддрд╛ (%)"
        },
        "button": "ЁЯФН рдлрд╕рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░реЗрдВ",
        "success": "тЬЕ рдЕрдиреБрд╢рдВрд╕рд┐рдд рдлрд╕рд▓",
        "error": "тЪая╕П рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░ рдбреЗрдЯрд╛ рдореЗрдВ рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рд╕рд╣реА рд▓рд┐рдЦреЗрдВред",
        "market": "ЁЯТ░ рдмрд╛рдЬрд╝рд╛рд░ рдореВрд▓реНрдп"
    }
}

# ЁЯП╖я╕П Title & description
st.title(translations[lang]["title"])
st.write(translations[lang]["desc"])

# ЁЯУе User Inputs
N = st.number_input(translations[lang]["inputs"]["N"], min_value=0, max_value=500, value=50)
P = st.number_input(translations[lang]["inputs"]["P"], min_value=0, max_value=500, value=30)
K = st.number_input(translations[lang]["inputs"]["K"], min_value=0, max_value=500, value=40)
pH = st.number_input(translations[lang]["inputs"]["pH"], min_value=0.0, max_value=14.0, value=6.5)
rainfall = st.number_input(translations[lang]["inputs"]["rainfall"], min_value=0.0, max_value=500.0, value=120.0)
temperature = st.number_input(translations[lang]["inputs"]["temperature"], min_value=8, max_value=43, value=25)
humidity = st.number_input(translations[lang]["inputs"]["humidity"], min_value=14, max_value=100, value=80)

# ЁЯМН External link (bottom-right corner)
st.markdown(
    """
    <div style="position: fixed; bottom: 10px; right: 10px; background-color: #f0f0f0; padding: 8px; border-radius: 5px;">
        <a href="https://ai-powered-leaf-stress-detection-for-sustainable-farming-ngsvn.streamlit.app/" target="_blank" style="text-decoration: none; color: blue; font-weight: bold;">
            ЁЯМ▒ Check Leaf Health
        </a>
    </div>
    """,
    unsafe_allow_html=True
)

# ЁЯФо Crop recommendation logic
def recommend_crop(N, P, K, pH, rainfall, market_data):
    if 6 <= pH <= 7 and rainfall > 100:
        crop = "Rice"
    elif 5.5 <= pH <= 6.5 and N < 100:
        crop = "Wheat"
    else:
        crop = "Maize"
    
    # Find market price
    price_row = market_data[market_data["crop"] == crop]
    if not price_row.empty:
        price = price_row["price_per_quintal"].values[0]
    else:
        price = "N/A"
    
    return {
        "recommended_crop": crop,
        "market_price": price
    }

# ЁЯФШ Button action
if st.button(translations[lang]["button"]):
    result = recommend_crop(N, P, K, pH, rainfall, market_data)
    st.success(
        f"{translations[lang]['success']}: {result['recommended_crop']} | {translations[lang]['market']}: тВ╣{result['market_price']}/quintal"
    )
